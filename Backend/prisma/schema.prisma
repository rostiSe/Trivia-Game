// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Question {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  category         String
  question         String            @unique
  correctAnswer    String
  incorrectAnswers String[]
  difficulty       String
  type             String
  users            QuestionOfUser[]
}

model User {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  email       String            @unique
  password    String
  name        String?
  createdAt   DateTime          @default(now())
  questions   QuestionOfUser[]
  matches     Int               @default(0)
  points      Int               @default(0)
  wins        Int               @default(0)
  losses      Int               @default(0)
  draws       Int               @default(0)
  groups      Group[]           @relation(fields: [groupIds], references: [id])
  groupIds    String[]          @db.ObjectId
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  leaderboardEntry       LeaderboardEntry?
}

model QuestionOfUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  answer     String
  createdAt  DateTime @default(now())

  @@unique([questionId, userId])
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  members     User[]   @relation(fields: [memberIds], references: [id])
  memberIds   String[] @db.ObjectId
}

model FriendRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId    String   @db.ObjectId
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId  String   @db.ObjectId
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([senderId, receiverId])
}

model LeaderboardEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId @unique
  points    Int      @default(0)
  matches   Int      @default(0)
  wins      Int      @default(0)
  losses    Int      @default(0)
  draws     Int      @default(0)
  createdAt DateTime @default(now())
}

